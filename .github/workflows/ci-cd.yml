name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    outputs:
      source-code: ${{ steps.upload.outputs.artifact-id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Upload source code artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: .

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: checkout
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Download source code
        uses: actions/download-artifact@v4
        with:
          name: source-code
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm install
      - run: npm test
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: password
          DB_NAME: testdb

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download source code
        uses: actions/download-artifact@v4
        with:
          name: source-code
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm install
      - run: npm run build
      - name: Upload build artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./build

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
      - name: Copy build to Docker context
        run: |
          mkdir -p docker-context
          cp -r build/* docker-context/
          cp Dockerfile docker-context/
          cp package*.json docker-context/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: docker/build-push-action@v4
        with:
          context: docker-context/
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/node-mysql-app:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/node-mysql-app:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/node-mysql-app:cache,mode=max

  docker-push:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/node-mysql-app:latest

